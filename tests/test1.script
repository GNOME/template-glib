require GLib
require Gio version "2.0"

assert(true)
assert(true != false)
assert(!false)
assert(TRUE)
assert(TRUE != false)
assert(TRUE == true)
assert(True == true)
assert(False == FALSE)
assert(False == false)

assert(123 == 123)
assert(123 != 124)
assert(123 != -123)
assert(123 == abs(-123))

assert(1 - 10 == -9)
assert(1 / 10 == .1)

abc = "abc"
assert(abc == "abc")
assert(abc != "abc\n")
assert(abc != "def")

# we can't do builtins yet w/ >1 param so this is a
# very bad pow() implementation that works on integers only.
func pow(a,b) = while b > 1 do a = a * a; b = b - 1;
assert(pow(2,3) == 8)
assert(pow(2,3) == 8) # and here
func multiply(x,y) = x * y
assert(multiply(10, 10) == 100)
assert(multiply(-10, 10) == -100)

func nop() = pass
nop()

def order2(a,b) assert(a==1); assert(b==2); end
order2(1,2)

def order3(a,b,c)
  assert(a == 1)
  assert(b == 2)
  assert(c == 3)
end
order3(1,2,3)

def weird1(a) assert(a==1)
end

# anonymous functions can have a single statement
(func() 123)()
(func(a,b) assert((a==1)&&(b==2)))(1,2)

myfunc = func() 9;

myfunc()

1234;
